--- Python-3.7.10/Parser/myreadline.c	2021-02-16 02:29:22.000000000 +0100
+++ python3-wasm/Parser/myreadline.c	2021-05-04 18:24:59.703254269 +0200
@@ -30,9 +30,6 @@
 static int
 my_fgets(char *buf, int len, FILE *fp)
 {
-#ifdef MS_WINDOWS
-    HANDLE hInterruptEvent;
-#endif
     char *p;
     int err;
     while (1) {
@@ -44,31 +41,6 @@
         if (p != NULL)
             return 0; /* No error */
         err = errno;
-#ifdef MS_WINDOWS
-        /* Ctrl-C anywhere on the line or Ctrl-Z if the only character
-           on a line will set ERROR_OPERATION_ABORTED. Under normal
-           circumstances Ctrl-C will also have caused the SIGINT handler
-           to fire which will have set the event object returned by
-           _PyOS_SigintEvent. This signal fires in another thread and
-           is not guaranteed to have occurred before this point in the
-           code.
-
-           Therefore: check whether the event is set with a small timeout.
-           If it is, assume this is a Ctrl-C and reset the event. If it
-           isn't set assume that this is a Ctrl-Z on its own and drop
-           through to check for EOF.
-        */
-        if (GetLastError()==ERROR_OPERATION_ABORTED) {
-            hInterruptEvent = _PyOS_SigintEvent();
-            switch (WaitForSingleObjectEx(hInterruptEvent, 10, FALSE)) {
-            case WAIT_OBJECT_0:
-                ResetEvent(hInterruptEvent);
-                return 1; /* Interrupt */
-            case WAIT_FAILED:
-                return -2; /* Error */
-            }
-        }
-#endif /* MS_WINDOWS */
         if (feof(fp)) {
             clearerr(fp);
             return -1; /* EOF */
@@ -93,114 +65,6 @@
     /* NOTREACHED */
 }
 
-#ifdef MS_WINDOWS
-/* Readline implementation using ReadConsoleW */
-
-extern char _get_console_type(HANDLE handle);
-
-char *
-_PyOS_WindowsConsoleReadline(HANDLE hStdIn)
-{
-    static wchar_t wbuf_local[1024 * 16];
-    const DWORD chunk_size = 1024;
-
-    DWORD n_read, total_read, wbuflen, u8len;
-    wchar_t *wbuf;
-    char *buf = NULL;
-    int err = 0;
-
-    n_read = (DWORD)-1;
-    total_read = 0;
-    wbuf = wbuf_local;
-    wbuflen = sizeof(wbuf_local) / sizeof(wbuf_local[0]) - 1;
-    while (1) {
-        if (PyOS_InputHook != NULL) {
-            (void)(PyOS_InputHook)();
-        }
-        if (!ReadConsoleW(hStdIn, &wbuf[total_read], wbuflen - total_read, &n_read, NULL)) {
-            err = GetLastError();
-            goto exit;
-        }
-        if (n_read == (DWORD)-1 && (err = GetLastError()) == ERROR_OPERATION_ABORTED) {
-            break;
-        }
-        if (n_read == 0) {
-            int s;
-            err = GetLastError();
-            if (err != ERROR_OPERATION_ABORTED)
-                goto exit;
-            err = 0;
-            HANDLE hInterruptEvent = _PyOS_SigintEvent();
-            if (WaitForSingleObjectEx(hInterruptEvent, 100, FALSE)
-                    == WAIT_OBJECT_0) {
-                ResetEvent(hInterruptEvent);
-                PyEval_RestoreThread(_PyOS_ReadlineTState);
-                s = PyErr_CheckSignals();
-                PyEval_SaveThread();
-                if (s < 0)
-                    goto exit;
-            }
-            break;
-        }
-
-        total_read += n_read;
-        if (total_read == 0 || wbuf[total_read - 1] == L'\n') {
-            break;
-        }
-        wbuflen += chunk_size;
-        if (wbuf == wbuf_local) {
-            wbuf[total_read] = '\0';
-            wbuf = (wchar_t*)PyMem_RawMalloc(wbuflen * sizeof(wchar_t));
-            if (wbuf)
-                wcscpy_s(wbuf, wbuflen, wbuf_local);
-            else {
-                PyErr_NoMemory();
-                goto exit;
-            }
-        }
-        else {
-            wchar_t *tmp = PyMem_RawRealloc(wbuf, wbuflen * sizeof(wchar_t));
-            if (tmp == NULL) {
-                PyErr_NoMemory();
-                goto exit;
-            }
-            wbuf = tmp;
-        }
-    }
-
-    if (wbuf[0] == '\x1a') {
-        buf = PyMem_RawMalloc(1);
-        if (buf)
-            buf[0] = '\0';
-        else {
-            PyErr_NoMemory();
-        }
-        goto exit;
-    }
-
-    u8len = WideCharToMultiByte(CP_UTF8, 0, wbuf, total_read, NULL, 0, NULL, NULL);
-    buf = PyMem_RawMalloc(u8len + 1);
-    if (buf == NULL) {
-        PyErr_NoMemory();
-        goto exit;
-    }
-    u8len = WideCharToMultiByte(CP_UTF8, 0, wbuf, total_read, buf, u8len, NULL, NULL);
-    buf[u8len] = '\0';
-
-exit:
-    if (wbuf != wbuf_local)
-        PyMem_RawFree(wbuf);
-
-    if (err) {
-        PyEval_RestoreThread(_PyOS_ReadlineTState);
-        PyErr_SetFromWindowsErr(err);
-        PyEval_SaveThread();
-    }
-
-    return buf;
-}
-
-#endif
 
 
 /* Readline implementation using fgets() */
@@ -211,50 +75,6 @@
     size_t n;
     char *p, *pr;
 
-#ifdef MS_WINDOWS
-    if (!Py_LegacyWindowsStdioFlag && sys_stdin == stdin) {
-        HANDLE hStdIn, hStdErr;
-
-        _Py_BEGIN_SUPPRESS_IPH
-        hStdIn = (HANDLE)_get_osfhandle(fileno(sys_stdin));
-        hStdErr = (HANDLE)_get_osfhandle(fileno(stderr));
-        _Py_END_SUPPRESS_IPH
-
-        if (_get_console_type(hStdIn) == 'r') {
-            fflush(sys_stdout);
-            if (prompt) {
-                if (_get_console_type(hStdErr) == 'w') {
-                    wchar_t *wbuf;
-                    int wlen;
-                    wlen = MultiByteToWideChar(CP_UTF8, 0, prompt, -1,
-                            NULL, 0);
-                    if (wlen) {
-                        wbuf = PyMem_RawMalloc(wlen * sizeof(wchar_t));
-                        if (wbuf == NULL) {
-                            PyErr_NoMemory();
-                            return NULL;
-                        }
-                        wlen = MultiByteToWideChar(CP_UTF8, 0, prompt, -1,
-                                wbuf, wlen);
-                        if (wlen) {
-                            DWORD n;
-                            fflush(stderr);
-                            /* wlen includes null terminator, so subtract 1 */
-                            WriteConsoleW(hStdErr, wbuf, wlen - 1, &n, NULL);
-                        }
-                        PyMem_RawFree(wbuf);
-                    }
-                } else {
-                    fprintf(stderr, "%s", prompt);
-                    fflush(stderr);
-                }
-            }
-            clearerr(sys_stdin);
-            return _PyOS_WindowsConsoleReadline(hStdIn);
-        }
-    }
-#endif
-
     n = 100;
     p = (char *)PyMem_RawMalloc(n);
     if (p == NULL) {
@@ -264,7 +84,12 @@
 
     fflush(sys_stdout);
     if (prompt)
+        #if __EMSCRIPTEN__
+        fprintf(stderr, "~~>");
+        #else
         fprintf(stderr, "%s", prompt);
+        #endif //__EMSCRIPTEN__
+
     fflush(stderr);
 
     switch (my_fgets(p, (int)n, sys_stdin)) {
@@ -275,6 +100,11 @@
         return NULL;
     case -1: /* EOF */
     case -2: /* Error */
+    case -3:
+        #ifdef __EMSCRIPTEN__
+        #warning ------------- no no no i won't go there --------------
+        #endif
+        break;
     default: /* Shouldn't happen */
         *p = '\0';
         break;
