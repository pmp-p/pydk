--- Python-3.7.12/setup.py	2021-09-04 05:49:21.000000000 +0200
+++ Python-3.7.12-pydk/setup.py	2022-03-16 12:55:46.781039105 +0100
@@ -774,7 +774,7 @@
         # pwd(3)
         exts.append( Extension('pwd', ['pwdmodule.c']) )
         # grp(3)
-        exts.append( Extension('grp', ['grpmodule.c']) )
+        # __ANDROID__ exts.append( Extension('grp', ['grpmodule.c']) )
         # spwd, shadow passwords
         if (config_h_vars.get('HAVE_GETSPNAM', False) or
                 config_h_vars.get('HAVE_GETSPENT', False)):
@@ -902,12 +902,12 @@
             missing.append('readline')
 
         # crypt module.
-
-        if self.compiler.find_library_file(lib_dirs, 'crypt'):
-            libs = ['crypt']
-        else:
-            libs = []
-        exts.append( Extension('_crypt', ['_cryptmodule.c'], libraries=libs) )
+#__ANDROID__
+#        if self.compiler.find_library_file(lib_dirs, 'crypt'):
+#            libs = ['crypt']
+#        else:
+#            libs = []
+#        exts.append( Extension('_crypt', ['_cryptmodule.c'], libraries=libs) )
 
         # CSV files
         exts.append( Extension('_csv', ['_csv.c']) )
@@ -1179,7 +1179,7 @@
                              '/usr/local/include/sqlite3',
                              ]
         if cross_compiling:
-            sqlite_inc_paths = []
+            sqlite_inc_paths = [f'{os.environ["PREFIX"]}/include/sqlite3']
         MIN_SQLITE_VERSION_NUMBER = (3, 3, 9)
         MIN_SQLITE_VERSION = ".".join([str(x)
                                     for x in MIN_SQLITE_VERSION_NUMBER])
@@ -1450,37 +1450,12 @@
         # You can upgrade zlib to version 1.1.4 yourself by going to
         # http://www.gzip.org/zlib/
         zlib_inc = find_file('zlib.h', [], inc_dirs)
-        have_zlib = False
-        if zlib_inc is not None:
-            zlib_h = zlib_inc[0] + '/zlib.h'
-            version = '"0.0.0"'
-            version_req = '"1.1.3"'
-            if host_platform == 'darwin' and is_macosx_sdk_path(zlib_h):
-                zlib_h = os.path.join(macosx_sdk_root(), zlib_h[1:])
-            with open(zlib_h) as fp:
-                while 1:
-                    line = fp.readline()
-                    if not line:
-                        break
-                    if line.startswith('#define ZLIB_VERSION'):
-                        version = line.split()[2]
-                        break
-            if version >= version_req:
-                if (self.compiler.find_library_file(lib_dirs, 'z')):
-                    if host_platform == "darwin":
-                        zlib_extra_link_args = ('-Wl,-search_paths_first',)
-                    else:
-                        zlib_extra_link_args = ()
-                    exts.append( Extension('zlib', ['zlibmodule.c'],
-                                           libraries = ['z'],
-                                           extra_link_args = zlib_extra_link_args))
-                    have_zlib = True
-                else:
-                    missing.append('zlib')
-            else:
-                missing.append('zlib')
-        else:
-            missing.append('zlib')
+        #__ANDROID__
+        zlib_extra_link_args = ()
+        exts.append( Extension('zlib', ['zlibmodule.c'],
+                               libraries = ['z'],
+                               extra_link_args = zlib_extra_link_args))
+        have_zlib = True
 
         # Helper module for various ascii-encoders.  Uses zlib for an optimized
         # crc32 if we have it.  Otherwise binascii uses its own.
@@ -1498,23 +1473,10 @@
                                extra_link_args = extra_link_args) )
 
         # Gustavo Niemeyer's bz2 module.
-        if (self.compiler.find_library_file(lib_dirs, 'bz2')):
-            if host_platform == "darwin":
-                bz2_extra_link_args = ('-Wl,-search_paths_first',)
-            else:
-                bz2_extra_link_args = ()
-            exts.append( Extension('_bz2', ['_bz2module.c'],
-                                   libraries = ['bz2'],
-                                   extra_link_args = bz2_extra_link_args) )
-        else:
-            missing.append('_bz2')
+        exts.append( Extension('_bz2', ['_bz2module.c'], libraries = ['bz2'], extra_link_args = [f"-L{os.environ['PREFIX']}/lib",f"-I{os.environ['PREFIX']}/include"]) )
 
         # LZMA compression support.
-        if self.compiler.find_library_file(lib_dirs, 'lzma'):
-            exts.append( Extension('_lzma', ['_lzmamodule.c'],
-                                   libraries = ['lzma']) )
-        else:
-            missing.append('_lzma')
+        exts.append( Extension('_lzma', ['_lzmamodule.c'], libraries = ['lzma'], extra_link_args = [f"-L{os.environ['PREFIX']}/lib",f"-I{os.environ['PREFIX']}/include"]) )
 
         # Interface to the Expat XML parser
         #
@@ -1669,17 +1631,8 @@
             missing.append('_tkinter')
 
         # Build the _uuid module if possible
-        uuid_incs = find_file("uuid.h", inc_dirs, ["/usr/include/uuid"])
-        if uuid_incs is not None:
-            if self.compiler.find_library_file(lib_dirs, 'uuid'):
-                uuid_libs = ['uuid']
-            else:
-                uuid_libs = []
-            self.extensions.append(Extension('_uuid', ['_uuidmodule.c'],
-                                   libraries=uuid_libs,
-                                   include_dirs=uuid_incs))
-        else:
-            missing.append('_uuid')
+        #__ANDROID__
+        missing.append('_uuid')
 
 ##         # Uncomment these lines if you want to play with xxmodule.c
 ##         ext = Extension('xx', ['xxmodule.c'])
